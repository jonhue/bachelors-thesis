initSidebarItems({"enum":[["IVPStatus","Status of an IVP Solver after a step"]],"fn":[["solve_ivp","Solve an initial value problem of yâ€™(t) = f(t, y) numerically."]],"struct":[["Adams","5th order Adams predictor-corrector method for solving an IVP."],["Adams2","3rd order Adams predictor-corrector method for solving an IVP."],["AdamsInfo","Provides an IVPSolver implementation for AdamsSolver, based on the predictor and correctorr coefficients. It is up to the AdamsSolver to set up AdamsInfo with the correct coefficients."],["BDF2","2nd order backwards differentiation formula method for solving an initial value problem."],["BDF6","6th order backwards differentiation formula method for solving an initial value problem."],["BDFInfo","Provides an IVPSolver implementation for BDFSolver, based on the higher and lower order coefficients. It is up to the BDFSolver to correctly implement the coefficients."],["Euler","Euler solver for an IVP."],["RK23","Bogacki-Shampine method for solving an IVP."],["RK45","Runge-Kutta-Fehlberg method for solving an IVP."],["RKInfo","Provides an IVPSolver implementation for RungeKuttaSolver, based entirely on the Butch Tableaux coefficients. It is up to the RungeKuttaSolver to set up RKInfo. See RK45 for an example."]],"trait":[["AdamsSolver","This trait allows a struct to be used in the Adams Predictor-Corrector solver"],["BDFSolver","This trait allows a struct to be used in the BDF"],["IVPSolver","Trait defining what it means to be an IVP solver. solve_ivp is automatically implemented based on your step implementation."],["RungeKuttaSolver","This trait allows a struct to be used in the Runge-Kutta solver."]]});